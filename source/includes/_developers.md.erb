# Setup for developers

## Backend

Make sure your machine has a working installation of the Ruby version required by the project.
This version can be found in the `.ruby-version` file.
Usage of RVM is recommended to manage different Ruby versions and sets of gems.

```shell
# STEPS FOR INITIAL INSTALLATION
# Clone the repository
$ git clone git@github.com:OpenWebslides/openwebslides-backend.git
$ cd openwebslides-backend

# Use the correct Ruby version
$ rvm use `cat .ruby-version`@`cat .ruby-gemset` --create

# Install dependencies
$ gem install bundler
$ bundle install

# Create repository data and temporary files path
$ mkdir -p data/ tmp/uploads/

# Configure environment variables
$ cp openwebslides.env.example openwebslides.env
$ nano openwebslides.env

# Source environment variables
$ . ./openwebslides.env

# Apply database migrations
$ bundle exec rails db:schema:load

# Start server
$ bundle exec rails server
```

```shell
# STEPS FOR SUBSEQUENT NEW CODE
# Update the repository
$ git pull

# Update dependencies
$ bundle install

# Apply database migrations
$ bundle exec rails db:migrate

# Start server
$ bundle exec rails server
```

```shell
# USEFUL RAKE TASKS
# Suffix every command with `RAILS_ENV=test` to operate on the test database
$ bundle exec rails db:create       # Create database
$ bundle exec rails db:migrate      # Migrate database
$ bundle exec rails db:drop         # Drop database
$ bundle exec rails db:setup        # Create database and load schema
$ bundle exec rails db:reset        # Drop and migrate database
$ bundle exec rails db:schema:load  # Load database schema (use instead of db:migrate on empty databases)
$ bundle exec rails db:clear        # Delete all data in the database
$ bundle exec rails sidekiq:clear   # Clear Sidekiq queue
```

### Sidekiq

In production environment, asynchronous tasks such as manipulating the filesystem repositories are sent to a background queue, implemented using Sidekiq.
Communication between the server and the Sidekiq instance require Redis to be present and configured.
Background tasks are inlined automatically in the dev and test environment.
The asynchronous behaviour can be enabled by specifying the `SIDEKIQ_ASYNC` environment variable.

```shell
# Start Redis
$ systemctl start redis

# Start Sidekiq
$ bundle exec sidekiq

# Start server
$ bundle exec rails server

# Start server with asynchronous processing
$ SIDEKIQ_ASYNC=true bundle exec rails server
```

In the development server, the Sidekiq Web UI is mounted under `/sidekiq`.

### Making a release

A script is provided to make API releases consistent and easily.
When you have finished making changes to your feature/patch, run the script in `bin/release` with one of the following parameters:

```shell
$ # For major releases, resets the minor and patch version numbers to 0
$ bin/release --major
$ # For minor releases, resets the patch version number to 0
$ bin/release --minor
$ # For patch releases
$ bin/release --patch
```

Don't forget to update the [API documentation](https://openwebslides.github.io/documentation/).
Increment the version number twice in `source/index.html.md.erb` and add an entry to the changelog.

Push your feature/patch branch to Github and open a pull request.
Don't forget to push your local tags as well: `git push --tags`.

## Frontend

Make sure your machine has a working installation of the Node version required by the project.

```shell
# STEPS FOR INITIAL INSTALLATION
# Clone the repository
$ git clone git@github.com:OpenWebslides/openwebslides-frontend.git
$ cd openwebslides-frontend

# Install dependencies
$ yarn

# Start server
$ yarn run dev-server
```

<aside class="notice">
  The default API endpoint of the frontend stack is currently set to <code>http://owsdev.ugent.be/api/</code> in the frontend <code>app/config/api.js</code> file.
  If you wish to use an alternative endpoint, you can change the defaults in this file.
  However, changes to this file should never be committed.
</aside>
