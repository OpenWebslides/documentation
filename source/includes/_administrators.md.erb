
# Setup for administrators

## Installation and configuration

The platform uses Docker and docker-compose to allow it to be installed and ran on any platform, independent of operating system or distribution.
The backend application code itself only has support for Linux.
Installing it on a Windows operating system is on your own risk!

```shell
$ git clone https://github.com/OpenWebslides/openwebslides-backend.git openwebslides
$ cd openwebslides
$
$ # The frontend code is stored as a git submodule in `web/`.
$ # Initialize and update it to the latest stable version
$ git submodule init
$ git submodule update
$ (cd web && git pull origin master)
$
$ # Configure environment variables
$ cp openwebslides.env.example openwebslides.env
$ nano openwebslides.env
$
$ # Configure the NGINX server by editing the files in nginx/sites-available/
$ cd nginx/sites-enabled/
$ ln -s ../sites-available/my.domain.com.conf .
$
$ # Bring up the platform
$ docker build -t openwebslides/openwebslides:latest .
$ docker-compose up -d
$
$ # The Postgres user and database are not automatically created
$ docker-compose exec postgres psql -U postgres -c \
  "CREATE ROLE openwebslides WITH ENCRYPTED PASSWORD 'openwebslides' LOGIN;"
$ docker-compose exec postgres psql -U postgres -c \
  "CREATE DATABASE openwebslides OWNER openwebslides;"
$
$ # Restart the application container to run database migrations.
$ # Migrations are automatically ran on every application container start.
$ docker-compose restart
$
$ # After bringing up the HTTP server, run the CertBot container to request and
$ # retrieve certificates from Let's Encrypt
$ ./certbot.sh my.domain.com
$
$ # Add this command to a monthly crontab to ensure the certificates
$ # (valid for 3 months) will be refreshed in a timely fashion
$ /path/to/openwebslides/certbot.sh my.domain.com
```

## Data storage

The machine-specific data is stored on several Docker volumes, mounted in the relevant containers.

Volume    | Description
--------- | -------
`data`    | Contains the local repositories
`postgres`| Contains the PostgreSQL database
`redis`   | Contains the Redis database
`public`  | Contains the compiled frontend code (regenerated on every build)
`upload`  | Contains temporary uploaded files (cleaned on every startup)

Only the first two volumes contain critical data and should be backed up.
The `public` volume is used by the nginx container to serve the static assets.
The `upload` volume is used by the application container to store temporary uploaded data.
