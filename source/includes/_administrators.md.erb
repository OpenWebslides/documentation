
# Setup for administrators

## Installation

```shell
$ git clone https://github.com/OpenWebslides/OpenWebslides.git
$ cd OpenWebslides
```

```shell
$ docker-compose up --build
```

```shell
$ docker-compose exec postgres psql -U postgres -c \
  "CREATE ROLE openwebslides WITH ENCRYPTED PASSWORD 'openwebslides' LOGIN;"
```

```shell
$ docker-compose exec postgres psql -U postgres -c \
  "CREATE DATABASE openwebslides OWNER openwebslides;"
```

```shell
$ docker-compose restart
```

The platform is built on the Docker container software, and uses the docker-compose utility to orchestrate the different services within the platform. This allows server administrators to run the platform as a contained package, without interfering with already installed system applications and libraries.

The machine-specific data is stored on several Docker volumes, mounted in the relevant containers.

Volume | Description
--------- | ------- | -----------
data | Contains the local repositories
postgres | Contains the PostgreSQL database
redis | Contains the Redis database
_public_ | Contains the publicly served assets (regenerated on every build)

Only the first three volumes contain mission-critical data and should be backed up. The _public_ volume is used by the nginx container to serve the static assets.

**Clone the repository**

Clone the [repository](https://github.com/OpenWebslides/OpenWebslides) to a local directory.

**Build and start the Docker containers**

Using docker-compose, start the various services.

**Create database credentials**

On the first run, the database will be empty. Create a user and put it in the `openwebslides.env` file.
Create a database for this user too and put it in the `openwebslides.env` file.

Finally, restart all services to use the new `openwebslides.env`. The platform is now available on <a href="http://localhost/">http://localhost/</a>.

## Configuration

```shell
$ cp openwebslides.env.example openwebslides.env
```

The platform's features can be configured by customizing the `config/openwebslides.yml` file.
The deployment can be configured by copying the provided `openwebslides.env.example` to `openwebslides.env` and customizing this file. Docker-compose will then automatically use this file for the relevant containers.

### TLS

The setup optionally supports using secured communication over TLS. In order to enable this, deploy the application with `docker-compose` including the `docker-compose.prod.yml` override file. This enables an alternative NGINX configuration file using TLS (`nginx/nginx.prod.conf`). Adjust this file to match your domain and certificate locations.

## Backup

Persistent critical data is stored in the following systems:

- PostgreSQL: relational data, deck metadata
- `data/`: local repositories

Additional non-critical data is stored in the following systems:

- Redis: conversion queue
- `tmp/`: temporary runtime data, including uploaded files for conversion queue

## Import

Importing an existing webslides deck is officially not supported. However, there is functionality available within the platform to do this.

```shell
# SSH into the platform
$ ssh openwebslides@owsdev.ugent.be
$ cd OpenWebslides

# Open up a Rails console
$ docker-compose exec app bundle exec rails console

# Find the user to which the deck will belong
> user = User.find_by :email => 'foo@bar.com'

# Import the deck
DeckService.new(Deck.new :owner => user, :name => 'Deck name').import('http://path/to/git/repository.git')
```

If you encounter any errors while importing, the deck will not be created. Those errors usually exist because an asset reference was invalid (see stacktrace and exception message). Fix these references in the repository's index.html and commit these changes before trying again.

```ruby
# Snippet for importing all DI decks
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 1 - introduction only').import('https://github.com/OpenWebslides-Content/Digital-imaging-techniques--part-1-introduction-only.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 1.2 basic principles').import('https://github.com/OpenWebslides-Content/Digital_imaging_techniques_part_1-2_basic_principles.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 1.3 processing and analysis').import('https://github.com/OpenWebslides-Content/Digital_imaging_techniques_part_1-3_processing_and_analysis.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 2.1 SEM intro').import('https://github.com/OpenWebslides-Content/DIT_part_2-1_SEM_intro.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 2.2 SEM principles').import('https://github.com/OpenWebslides-Content/DIT_part_2-2_SEM_principles.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 2.3 ESEM').import('https://github.com/OpenWebslides-Content/DIT_part_2-3_ESEM.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 2.4 MLA').import('https://github.com/OpenWebslides-Content/DIT_part_2-4_MLA.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 2.5 FIB SEM').import('https://github.com/OpenWebslides-Content/DIT_part_2-5_FIB_SEM.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 3.1 CT basic principles').import('https://github.com/OpenWebslides-Content/DIT_part_3-1_CT_basic_principles.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 3.2 source and detector').import('https://github.com/OpenWebslides-Content/DIT_part_3-2_source_and_detector.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 3.3 artifacts and considerations').import('https://github.com/OpenWebslides-Content/DIT_part_3-3_artifacts_and_considerations.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 3.4 applications A').import('https://github.com/OpenWebslides-Content/DIT_part_3-4_applications.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 3.5 applications B').import('https://github.com/OpenWebslides-Content/DIT_part_3-5_applications_B.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 3.6 applications C').import('https://github.com/OpenWebslides-Content/DIT_part_3-6_applications_C.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 4.1 NI Eberhard').import('https://github.com/OpenWebslides-Content/DIT_part_4-1_NI_Eberhard.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 4.2 NI').import('https://github.com/OpenWebslides-Content/DIT_part_4-2_NI.git')
DeckService.new(Deck.new :owner => user, :name => 'Digital Imaging Techniques 4.3 NI euromat').import('https://github.com/OpenWebslides-Content/DIT_part_4-3_NI_euromat.git')
```
