
# Setup for administrators

## Installation

The platform uses Docker and docker-compose to allow it to be installed and ran on any platform, independent of operating system or distribution.

```shell
$ git clone https://github.com/OpenWebslides/openwebslides-backend.git
$ cd openwebslides-backend
```

Initialize the frontend code and update it to the latest version

```shell
$ git submodule init
$ git submodule update
$ cd web && git pull origin master
```

Configure the platform

```
$ cp openwebslides.env.example openwebslides.env
$ nano openwebslides.env
```

Before bringing up the web server, run the CertBot container to request and retrieve certificates from Let's Encrypt

```shell
$ ./certbot.sh my.domain.com
```

Add this command to a monthly crontab to ensure the certificates (valid for 3 months) will be refreshed in time

```shell
$ /app/openwebslides-backend/certbot.sh my.domain.com
```

Configure the web server by editing the files in `nginx/sites-available`, and symlinking the sites that are enabled on the machine from `nginx/sites-enabled`

Bring up the platform

```shell
$ docker-compose up --build
```

The Postgres user and database are not automatically created

```shell
$ docker-compose exec postgres psql -U postgres -c \
  "CREATE ROLE openwebslides WITH ENCRYPTED PASSWORD 'openwebslides' LOGIN;"
```

```shell
$ docker-compose exec postgres psql -U postgres -c \
  "CREATE DATABASE openwebslides OWNER openwebslides;"
```

Restart the application container to run database migrations.
Migrations are automatically ran on every application container start.

```shell
$ docker-compose restart
```

A small script to make subsequent deployments easier is provided in `deploy.sh`.

## Data storage

The machine-specific data is stored on several Docker volumes, mounted in the relevant containers.

Volume    | Description
--------- | -------
`data`    | Contains the local repositories
`postgres`| Contains the PostgreSQL database
`redis`   | Contains the Redis database
`public`  | Contains the compiled frontend code (regenerated on every build)
`upload`  | Contains temporary uploaded files (cleaned on every startup)

Only the first two volumes contain critical data and should be backed up.
The `public` volume is used by the nginx container to serve the static assets.
The `upload` volume is used by the application container to store temporary uploaded data.

### TLS

The setup optionally supports using secured communication over TLS.
In order to enable this, deploy the application with `docker-compose` including the `docker-compose.prod.yml` override file.
Using this file will include the `nginx/sites-prod` directory for site configuration, instead of `nginx/sites`.

```shell
$ docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
```
