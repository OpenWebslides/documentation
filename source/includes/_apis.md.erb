# API overview

The REST API backend is built in a modular way.
The URL structure is kept as simple as possible, avoiding nesting resources where possible.

API endpoint      | Description
----------------- | ------------
`/alerts`         | [User alerts API](#alerts-api)
`/assets`         | [Topic assets API](#assets-api)
`/comments`       | [Annotations API](#annotations-api): comments
`/confirmation`   | [Authentication API](#confirmation-api): email confirmation
`/conversations`  | [Annotations API](#annotations-api): conversations
`/feedItems`      | [Recent Activity feed API](#feed-items-api)
`/oauth`          | OAuth endpoints; not part of the REST API
`/password`       | [Authentication API](#password-api): password reset
`/pullRequests`   | [Pull Request API](#pull-request-api)
`/token`          | [Authentication API](#token-api): authentication token
`/topics`         | [Topics API](#topics-api)
`/users`          | [Users API](#users-api)

For documentation on filtering, sorting, including resources, error responses and other functionality not included on this website, refer to the [JSON-API specification](http://jsonapi.org/format/1.0/).

## Authentication

The REST API uses [JSON Web Tokens](https://jwt.io/) (JWTs) as authentication mechanism.
The API expects the token to be included in all API requests on protected endpoints as an `Authorization` header in the bearer token format.
The token is only valid for a limited time, but a renewed token is available on every (successfully authenticated) response as an `Authorization` header.
This new token should be used for subsequent API calls.

<aside class="notice">
  <em>Protected</em> endpoints require authentication. <em>Unprotected</em> endpoints can be manipulated without a valid token. However, performing a request on an unprotected endpoint with a token can yield different results than without a token. For example, retrieving the list of topics with a token will also return <code>protected</code> and <code>private</code> topics, where the equivalent request without token will only return <code>public</code> topics.
</aside>

<aside class="notice">
  You must replace the JWT in the examples with a JWT obtained from the <a href="#token-api">Token API</a>.
</aside>


```http
GET <%= current_page.data.endpoint %>users HTTP/1.1
Accept: application/vnd.api+json, application/vnd.openwebslides+json; version=<%= current_page.data.version %>
Authorization: Bearer TOKEN
```

> Don't forget to replace `TOKEN` with the JWT obtained from the [Token API](#token-api)

```http
HTTP/1.1 200 OK
Content-Type: application/vnd.api+json
Content-Length: 138
```

## Versioning

The API is semantically versioned.
Every request has to include the API version of the client in the `Accept` header as shown below.
The server will then determine if the version is satisfiable and proceed as requested.
If the version cannot be satisfied by the server, it will return a HTTP 406 Not Acceptable error.
Every response by the server also includes a `Content-Type` header containing the server's version.

The `Accept` header has to contain two MIME types: the JSON API MIME type (`application/vnd.api+json`) and an Open Webslides MIME type (`application/vnd.openwebslides+json`) with a version parameter.

```http
GET <%= current_page.data.endpoint %>users HTTP/1.1
Accept: application/vnd.api+json, application/vnd.openwebslides+json; version=<%= current_page.data.version %>
Authorization: Bearer TOKEN
```

> Success response

```http
HTTP/1.1 200 OK
Content-Type: application/vnd.api+json, application/vnd.openwebslides+json; version=<%= current_page.data.version %>
```

```json
{...}
```

> Failure response

```http
HTTP/1.1 406 Not Acceptable
Content-Type: application/vnd.api+json, application/vnd.openwebslides+json; version=<%= current_page.data.version %>
```

```json
{
  "errors": [
    {
      "title": "Unacceptable version",
      "detail": "The request cannot be fulfilled due to mismatching API version. The API version is '<%= current_page.data.version %>'. This request specified 'some version'.",
      "code": "406",
      "status": "406"
    }
  ]
}
```

## Request headers

Since the API adheres to the [JSON-API specification](http://jsonapi.org/format/1.0/), certain headers are required.
For _all_ requests excluding binary uploads, the `application/vnd.api+json` should be used as MIME type.
This means that for all requests, the `Accept` header should be set to this value (next to the Open Webslides MIME type),
and for all requests sending data the `Content-Type` header should be set to this value.
For protected endpoints, a `Authorization` header is also required in the correct format as [described above](#authentication).

```http
POST <%= current_page.data.endpoint %>topics HTTP/1.1
Accept: application/vnd.api+json, application/vnd.openwebslides+json; version=<%= current_page.data.version %>
Content-Type: application/vnd.api+json
Accept: application/vnd.api+json, application/vnd.openwebslides+json; version=<%= current_page.data.version %>
Token: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MDU3MjU4NzMsInN1YiI6MSwidmVyIjozfQ.1v_SvE8yQE-z9FiKoFhkWRXx9hJ4kQNRxz1uc8zXFjg
```

```json
<%= api_response 'topics/get_topic' %>
```

## Request body

Refer to the [JSON-API specification](http://jsonapi.org/format/1.0/) for a formal definition of request body and the documentation on this website for examples on every API.

## HTTP status codes

The API uses the following HTTP error codes:


Status code | Description
---------- | -------
400 | Bad Request -- Invalid data or URL
401 | Unauthorized -- Invalid or no API token
403 | Forbidden -- Not authorized to perform action
404 | Not Found
405 | Method Not Allowed
406 | Not Acceptable -- `Content-Type` should be `application/vnd.api+json`
410 | Gone -- Resource has been removed
422 | Unprocessable Entity -- Malformed `data` object
429 | Too Many Requests -- Rate limiting in effect (to be included in future updates)
500 | Internal Server Error -- The server had a problem. Please try again later.
503 | Service Unavailable -- Temporarily offline for maintenance. Please try again later.

## JSON API error codes

Besides HTTP status codes, the API provides additional error codes in the returned `errors` object under the `code` variable:

Error code | Description
---------- | -------
100 | Validation error
101 | Invalid resource
102 | Filter not allowed
103 | Invalid field value
104 | Invalid field
105 | Param not allowed
106 | Param missing
107 | Invalid filter value
109 | Key order mismatch
110 | Key not included in URL
112 | Invalid include
113 | Relation exists
114 | Invalid sort criteria
115 | Invalid links object
116 | Type mismatch
117 | Invalid page object
118 | Invalid page value
119 | Invalid field format
120 | Invalid filters syntax
121 | Save failed
122 | Invalid data format
400 | Bad request
403 | Forbidden
404 | Record not found
406 | Not acceptable
415 | Unsupported media type
423 | Locked
500 | Internal server error
