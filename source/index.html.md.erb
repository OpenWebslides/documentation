---
title: Open Webslides documentation

toc_footers:
  - <a href='https://github.com/tripit/slate'>Documentation Powered by Slate</a>

includes:
  - administrators
  - infrastructure
  - developers
  - apis
  - authentication
  - users
  - topics
  - annotations
  - errors

search: true

endpoint: https://api.openwebslides.org/api/
---

# Introduction

Welcome to the Open Webslides documentation! This website aggregates the documentation for developers and administrators.

## Overview

The Open Webslides platform is split into two components: frontend and backend.
The frontend is built in React and uses Redux to store application state.
The backend is built in Ruby on Rails and exposes a REST API to the client.

The REST API is based on the JSON-API specification version 1.0.
Under certain conditions, the API deviates from the spec or adds its own implementation when a procedure is not described in the specification, such as uploading binary files.
For more examples and technical documentation, refer to the [JSON-API specification](http://jsonapi.org/format/1.0/) and the [implementation in use](http://jsonapi-resources.com/v0.9/guide/index.html).
All API calls are subject to a predefined format, defined in the JSON-API spec.
Part of these requirements is that all HTTP requests should use the `application/vnd.api+json` MIME type to exchange data.

## Application architecture

The entire platform runtime is governed by Docker.
All components are running in separate containers, from the web server to the database management system.
The following components are present in a fully configured and running system:

- Web server (NGINX)
- Application runtime (API server)
- Application runtime (configurable amount of instances, used for asynchronous processing of tasks)
- Database (PostgreSQL)
- Block storage
- Key-value store (Redis, communication between application runtimes)

Various external services are also linked into the platform.
Depending on configuration, this includes an email provider and an identity (OAuth) provider.

<%= image_tag 'architecture.png' %>

## Data model

<%= image_tag 'data_model.png' %>

## Permission model

A topic and its assets are protected by the `state` attribute.
This attribute determines in what context a topic is available and can have the following values:

State | Description
-----------|-----------
`public` | Visible to everyone, signin **not required**
`protected` | Visible to everyone, signin required
`private` | Only visible to owner and collaborators

**Permission table**

This table demonstrates the permissions given in each context, depending on the access level.
_Guest_ indicates a user that is not signed in.
_Member_ indicates a user that is signed in.
_Collaborator_ indicates a user that is added to the collaborator's list on the topic.
_Owner_ indicates the owner/creator of a deck.

| Topic access level | User access level | Resulting permissions |
| ------------------ | ----------------- | --------------------- |
| `public`           | Guest             | read                  |
|                    | Member            | read                  |
|                    | Collaborator      | read, write           |
|                    | Owner             | read, write, admin    |
| `protected`        | Guest             |                       |
|                    | Member            | read                  |
|                    | Collaborator      | read, write           |
|                    | Owner             | read, write, admin    |
| `private`          | Guest             |                       |
|                    | Member            |                       |
|                    | Collaborator      | read, write           |
|                    | Owner             | read, write, admin    |
